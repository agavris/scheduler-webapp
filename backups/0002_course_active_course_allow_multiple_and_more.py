# Generated by Django 5.2.1 on 2025-05-16 03:09

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("scheduler", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="course",
            name="active",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="course",
            name="allow_multiple",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="course",
            name="corequisites",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="course",
            name="description",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="course",
            name="grade_level",
            field=models.IntegerField(default=9),
        ),
        migrations.AddField(
            model_name="course",
            name="grade_level_max",
            field=models.IntegerField(default=12),
        ),
        migrations.AddField(
            model_name="course",
            name="min_students",
            field=models.IntegerField(default=5),
        ),
        migrations.AddField(
            model_name="course",
            name="period",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="course",
            name="prerequsites",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="course",
            name="priority",
            field=models.IntegerField(
                default=3,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="room",
            field=models.CharField(blank=True, max_length=20),
        ),
        migrations.AddField(
            model_name="course",
            name="school_type",
            field=models.CharField(
                choices=[("MS", "Middle School"), ("HS", "High School")],
                default="HS",
                max_length=2,
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="subject",
            field=models.CharField(default="", max_length=100),
        ),
        migrations.AddField(
            model_name="course",
            name="teacher",
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name="schedule",
            name="academic_year",
            field=models.CharField(
                blank=True, help_text="Academic year for this schedule", max_length=20
            ),
        ),
        migrations.AddField(
            model_name="schedule",
            name="algorithm_used",
            field=models.CharField(
                default="ortools",
                help_text="Algorithm used to generate this schedule",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="schedule",
            name="execution_time",
            field=models.FloatField(
                default=0.0, help_text="Time taken to generate in seconds"
            ),
        ),
        migrations.AddField(
            model_name="schedule",
            name="is_active",
            field=models.BooleanField(
                default=True, help_text="Whether this schedule is active"
            ),
        ),
        migrations.AddField(
            model_name="schedule",
            name="is_final",
            field=models.BooleanField(
                default=False, help_text="Whether this schedule is finalized"
            ),
        ),
        migrations.AddField(
            model_name="schedule",
            name="iterations",
            field=models.IntegerField(
                default=0, help_text="Number of iterations performed"
            ),
        ),
        migrations.AddField(
            model_name="schedule",
            name="partial_count",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="schedule",
            name="perfect_count",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="schedule",
            name="school_type",
            field=models.CharField(
                choices=[("MS", "Middle School"), ("HS", "High School")],
                default="HS",
                help_text="Determines the scheduling protocol used",
                max_length=2,
            ),
        ),
        migrations.AddField(
            model_name="schedule",
            name="semester",
            field=models.CharField(
                blank=True,
                help_text="Semester or term for this schedule",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="schedule",
            name="unsatisfied_count",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="schedule",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="schedulesnapshot",
            name="school_type",
            field=models.CharField(
                choices=[("MS", "Middle School"), ("HS", "High School")],
                default="HS",
                max_length=2,
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="active",
            field=models.BooleanField(
                default=True,
                help_text="Whether this student is active and should be scheduled",
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="completed_courses",
            field=models.JSONField(default=list),
        ),
        migrations.AddField(
            model_name="student",
            name="gpa",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=3, null=True
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="parent_email",
            field=models.EmailField(blank=True, max_length=254),
        ),
        migrations.AddField(
            model_name="student",
            name="parent_name",
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AddField(
            model_name="student",
            name="parent_phone",
            field=models.CharField(blank=True, max_length=20),
        ),
        migrations.AddField(
            model_name="student",
            name="period_preferences",
            field=models.JSONField(
                default=dict, help_text="Period-specific course preferences"
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="preferences",
            field=models.JSONField(
                default=dict, help_text="Course preferences by period or time slot"
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="required_courses",
            field=models.JSONField(
                default=list,
                help_text="Courses that must be included in the student's schedule",
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="school_type",
            field=models.CharField(
                choices=[("MS", "Middle School"), ("HS", "High School")],
                default="HS",
                max_length=2,
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="special_needs",
            field=models.TextField(
                blank=True, help_text="Any special accommodations required"
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="student_id",
            field=models.CharField(blank=True, max_length=20),
        ),
        migrations.AddField(
            model_name="student",
            name="unavailable_periods",
            field=models.JSONField(
                default=list,
                help_text="Periods/times when student is unavailable (e.g., for specialized programs)",
            ),
        ),
        migrations.AlterField(
            model_name="course",
            name="max_students",
            field=models.IntegerField(default=30),
        ),
        migrations.AlterField(
            model_name="course",
            name="name",
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name="course",
            name="time_slot",
            field=models.CharField(
                choices=[
                    ("AM", "Morning"),
                    ("PM", "Afternoon"),
                    ("FullDay", "Full Day"),
                    ("SinglePeriod", "Single Period"),
                ],
                max_length=12,
            ),
        ),
        migrations.AlterField(
            model_name="schedule",
            name="is_best",
            field=models.BooleanField(
                default=False, help_text="Whether this is the best schedule"
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="am_preferences",
            field=models.JSONField(
                default=list, help_text="Morning course preferences"
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="grade",
            field=models.IntegerField(default=9),
        ),
        migrations.AlterField(
            model_name="student",
            name="pm_preferences",
            field=models.JSONField(
                default=list, help_text="Afternoon course preferences"
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="priority",
            field=models.IntegerField(
                default=3,
                help_text="Priority level (1-5, with 1 being highest)",
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AlterUniqueTogether(
            name="course",
            unique_together={("name", "school_type")},
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("period", models.IntegerField()),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scheduler.course",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scheduler.student",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="student",
            name="enrolled_courses",
            field=models.ManyToManyField(
                blank=True,
                related_name="enrolled_students",
                through="scheduler.Enrollment",
                to="scheduler.course",
            ),
        ),
        migrations.CreateModel(
            name="PeriodEnrollmentSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("period", models.IntegerField()),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scheduler.course",
                    ),
                ),
                (
                    "snapshot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scheduler.schedulesnapshot",
                    ),
                ),
            ],
            options={
                "unique_together": {("snapshot", "period")},
            },
        ),
    ]
